page!content:	= Extending Ruwiki %RV#%
	Ruwiki is relatively easily extended to support new features. There are
	four primary ways in which Ruwiki can be extended or modified by the
	end user: templates, translating Ruwiki messages and labels, markup
	tokens, and creating new backends.
	
	== Templates
	Templating is done with a heavily modified version of the \RDoc
	template.rb library included in the distribution of Ruwiki. The
	templating library allows for nested templates, and this is used
	extensively in Ruwiki. This library is documented in
	RuwikiTemplatingLibrary.
	
	There are four major templates: content, edit, save, and error. Each of
	these has a slightly different combination of template files used, and
	this means that there are different sets of variables available.
	
	The major templates are &ldquo;composite templates&rdquo; that are
	defined as follows:
	; content or search : body.tmpl, content.tmpl, controls.tmpl, footer.tmpl
	; edit or preview : body.tmpl, edit.tmpl
	; save : body.tmpl, save.tmpl, controls.tmpl, footer.tmpl
	; error : body.tmpl, error.tmpl
	
	=== Common Variables
	The following template variables are presented for all composite
	templates.
	; <tt>%css_link%</tt> : The contents of the CSS file for the template set.
	; <tt>%home_link%</tt> : A link to the root page of the Wiki.
	; <tt>%editable%</tt> : A boolean value to mark the page as editable or not. Used in a conditional block in the templates.
	; <tt>%cgi_url%</tt> : The URL for the Wiki.
	; <tt>%content%</tt> : The formatted content of the current page.
	; <tt>%page_project%</tt> : The project for the current page.
	; <tt>%page_raw_topic%</tt> : The topic for the current page, escaped for safe transmission over the web.
	; <tt>%page_topic%</tt> : The printable topic for the current page.
	; <tt>%url_project%</tt> : The URL to the current page&rsquo;s project.
	; <tt>%url_topic_search%</tt> : The URL to search for the current topic in the current project.
	; <tt>%link_topic_search%</tt> : A link to the current topic search.
	
	=== Variables for :content, :save, :search, :edit, :preview
	; <tt>%message%</tt> : A message presented at the top of the Wiki when Ruwiki needs to inform the user of something that is not an error.
	
	=== Variables for :content, :save, :search
	; <tt>%wiki_title%</tt> : The title of the Wiki.
	; <tt>%label_topic_or_search%</tt> : Either <tt>#topic#</tt> or <tt>#search#</tt>.
	; <tt>%page_topic_name%</tt> : The same as <tt>%page_topic%</tt>.
	
	=== Variables for :edit, :preview
	; <tt>%wiki_title%</tt> : The title of the Wiki with a tag to indicate that the page is being edited.
	; <tt>%page_content%</tt> : The content of the page.
	; <tt>%page_version%</tt> : The current version number of the page.
	; <tt>%unedited_page_content%</tt> : The formatted, unedited content of the page.
	; <tt>%pre_page_content%</tt> : A Web-escaped form of the page content.
	; <tt>%edit_comment%</tt> : The current edit comment.
	
	=== Variables for :error
	; <tt>%wiki_title%</tt> : The title of the Wiki with an error message.
	; <tt>%name%</tt> : The name of the error.
	; <tt>%backtrace%</tt> : The backtrace of the error.
	; <tt>%backtrace_email%</tt> : The backtrace of the error formatted for sending by email.
	; <tt>%webmaster%</tt> : The email address of the webmaster.
	
	== Translating Ruwiki Messages
	: NOTE: The mechanism for specifying language may be changed in a
	: future version of Ruwiki, although the internationalisation mechanism
	: will not be changing.
	
	Ruwiki is internationalized. This method sets the Ruwiki error messages
	(and a few other messages) to the specified language Module. The
	language Module must have a constant Hash called <tt>Message</tt>
	containing a set of symbols and localized versions of the messages
	associated with them.
	
	If the file <em>ruwiki/lang/es.rb</em> contains the module
	<tt>Ruwiki::Lang::ES</tt>, the messages for RSS could be localized to
	Spanish thus:
	
	  require 'ruwiki/lang/es'
	  ...
	  wiki.config.language = Ruwiki::Lang::ES
	
	Localization is currently per wiki instance. In a servlet environment,
	this may mean that only a single language is recognised.
	
	It is recommended that the hash be created with a default proc that
	reports unknown message keys.
	
	  Message = Hash.new { |h, k| "Language ERROR: Unknown message key #{k.inspect}." }
	
	== Extending Ruwiki Markup
	
	: <strong>WARNING:</strong> These \APIs will change in Ruwiki 0.9.0,
	: replacing the instance variables @project, @backend, and @script with
	: a Handler object. There may be other changes as well.
	
	Ruwiki&rsquo;s WikiMarkup can be extended by creating a new
	Ruwiki::Wiki::Token. Tokens will be automatically loaded if they are
	placed in <em>ruwiki/wiki/tokens</em>.
	
	It is recommended that new tokens be added to the test cases in
	<tt>tests/tc_tokens.rb</tt>.
	
	The following Ruwiki::Wiki::Token class will convert strings in the
	forms of \[ruby-talk:12345] to links.
	
	  class RubyTalkLinks < Ruwiki::Wiki::Token
	    def self.rank
	      2
	    end
	
	    def self.regexp
	      %r{\[ruby-talk:(\d+)\]}
	    end
	
	    def replace
	      lm = @match.captures[0]
	      %Q(<a class="rw_extlink" href="http://www.ruby-talk.org/#{lm}">#{@match[0]}</a>)
	    end
	  end
	
	=== Known Instance Variables
	==== @match
	The match data for this token instance is is kept in @match. This is
	what will be used in #replace and #restore.
	
	==== @project
	The project being processed.
	
	==== @backend
	The Backend for the wiki. If you are using Ruwiki tokenizers outside of
	Ruwiki, this does not need to be a \BackendDelegator, but can be the
	direct Backend (which expects less information).
	
	==== @script
	The URI to the script.
	
	==== @message
	The message hash for displaying localised messages.
	
	==== @title
	The title of the wiki instance.
	
	=== Required Methods
	==== ::regexp
	Ruwiki tokens are matched only through regular expression matches. As
	shown in the example above, the regular expression for ruby-talk
	mailing list posts is <tt>%r{\[ruby-\talk:(\d+)\]}</tt>. The purpose of
	the ::regexp method is to return the regexp for matching.
	
	For most inline matches, Ruwiki will ensure that the escape character
	(\) works automatically. For whole-line matches, it is necessary to
	match the escape character manually and provide a #restore method.
	
	As an example, the \HRule class implements these methods.
	
	  def self.regexp
	    %r|^\\?-{4,}|
	  end
	
	  def restore
	    @match[0][1 .. -1]
	  end
	
	It may also be necessary to match escapes manually on inline matches
	that must be along word boundaries where the regular expression
	includes characters that normally match word boundaries. The project
	index match (e.g., \::Ruwiki) regular expression does this
	<tt>%r{(\B|\\)::([A-Z][a-z]+)}</tt>.
	
	==== #replace
	This returns the formatted token. In the \RubyTalkLinks class above,
	the matched regular expression will be replaced with a hyperlink. The
	text of the hyperlink will be the matched text; the target of the
	hyperlink will include the first captured value.
	
	  def replace
	    lm = @match.captures[0]
	    %Q(<a class="rw_extlink" href="http://www.ruby-talk.org/#{lm}">#{@match[0]}</a>)
	  end
	
	=== Optional Methods
	==== ::rank
	By default, a token will be processed in the order created. Tokens may
	be given a specific rank to ensure that they are processed in a
	particular order. The default rank is <tt>9999</tt>.
	
	==== #restore
	Restores the token without replacement. Implements the results of the
	escape character. Each Token class is responsible for its own
	restoration. As noted in #regexp, whole-line tokens are most likely to
	need a #restore implementation.
	
	==== ::post_replace
	Performs any necessary massaging of the data. The Lists token uses this
	to ensure that lists are collapsed together; the Paragraph token uses
	this to ensure that there are no empty paragraph tag pairs
	(&lt;p&gt;&lt;/p&gt;).
	
	: <strong>Note:</strong> This has been changed from Ruwiki 0.6.x.
	: Plugins written for the Ruwiki 0.6.x Token API will need to be
	: modified so that this is defined as:
	
	  def self.post_replace
	    ...
	  end
	
	: as opposed to:
	
	  def post_replace
	    ...
	  end
	
	== Extending Ruwiki Backends
	Ruwiki can support varying backends, as the backend interface has been
	abstracted completely from the data store. The backend
	<strong>must</strong>:
	
	# reside in <em>ruwiki/backends/</em> as <em>backend_name</em>.rb.
	# be registered by adding the <em>backend_name</em> as a symbol (e.g., :<em>backend_name</em>) to Ruwiki::KNOWN_BACKENDS.
	# inherit from Ruwiki::Backend.
	# exist as Ruwiki::Backend::<em>\Backend_name</em>.
	
	=== Required Methods
	==== #initialize(storage_options)
	The backend may only obtain its configuration information from an
	option hash provided by the \BackendDelegate. This is obtained from
	<tt>wiki.config.options[backend]</tt>. If a configuration error is
	detected during initialization, the backend should raise the
	\Ruwiki::Backend exception class \BackendError. This would be done
	with:
	
	  raise Ruwiki::Backend::BackendError.new([:message_symbol, [message_parameters]])
	
	Backend writers should add appropriate messages to the
	<em>lang/en.rb</em> at a minimum. The \BackendDelegator will detect
	this and report the results appropriately.
	
	==== #load(topic, project)
	The backend will be provided the name of the topic and project. It must
	return the selected page as a hash of hashes. The hash must match that
	of \Ruwiki::Page#export. It will be passed as the parameter to
	\Ruwiki:::Page.new.
	
	==== #store(page)
	This method must store the provided Ruwiki::Page object. Current Ruwiki
	backend implementations store the Ruwiki::Page#export hash. This method
	is responsible for calling the private method Backend#make_diff and
	adding the result to the list of diffs for the page.
	
	===== Backend#make_diff(oldpage, newpage)
	This method expects two page objects, or their Ruwiki::Page#export
	representation. It will return a hash representing the difference set
	between the two pages.
	
	==== #obtain_lock(page, time, expire, address = 'UKNOWN')
	Obtains an exclusive lock on the page. The \BackendDelegator is called
	with the page, the address, and a timeout which is provided. The time
	is provided by the call to the BackendDelegate, and the expire is also
	provided by the call to the BackendDelegate which is given a timeout
	value (by default 600 seconds). If the lock is still in effect, a
	second call to #obtain_lock should renew the timeout on the lock.
	
	==== #release_lock(page, address = 'UNKNOWN')
	Releases the exclusive lock on the page. The lock should not be released
	unless the IP address on the lock is the same or the lock has expired.
	
	==== #project_exists?(project)
	Returns <tt>true</tt> if the project exists.
	
	==== #page_exists?(topic, project = 'Default')
	Returns <tt>true</tt> if the page exists within the specified project.
	
	==== #create_project(project)
	Attempts to create the project.
	
	==== #search_project(project, search_string)
	String search all topic names and content in a project and return a
	hash of topic hits:
	
	  topicname => hits
	
	==== #list_projects
	Return an array of all projects.
	
	==== #list_topics(project)
	Return an array of all topics within the project.
	
	=== Future Methods
	Note that these methods are currently optional (they are not yet called
	from Ruwiki), but will become required moving forward as the functions
	are implemented in Ruwiki.
	
	==== #destroy(page)
	Removes the page from the wiki. This should <strong>not</strong> remove
	the change history of the topic (in the event that the page has been
	removed maliciously). There will be a separate method to remove the
	page history.
	
	==== #destroy_project(project)
	Attempts to destroy the project.
	
	=== Optional Methods
	These methods are completely optional. They are guarded in the
	\BackendDelegate by a call to #respond_to?().
	
	==== #global_search(search_string)
	The global search in the backend delegate is by default implemented as
	a looping search through all projects. A backend may have a more
	efficient backend global search mechanism. If the backend responds to
	#global_search, then the \BackendDelegate will use this method.
properties!project:	Ruwiki
properties!title:	Extending_Ruwiki
properties!topic:	Extending_Ruwiki
properties!version:	1
ruwiki!content-version:	2
ruwiki!version:	%RV#%
