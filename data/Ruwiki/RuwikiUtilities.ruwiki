page!content:	= Ruwiki %RV#% Utilities
	Ruwiki %RV#% provides two utilities and three sample programs for
	deployment.
	
	== Managing Ruwiki Deployments
	A major change to the way that Ruwiki %RV#% works as compared to
	versions of Ruwiki 0.8.0 or earlier is that Ruwiki %RV#% supports being
	installed in a central location by one of the two major packaging
	systems available for Ruby (\RubyGems and RPA). Managing these
	deployments is accomplished with the utility appropriately enough named
	<tt>ruwiki</tt>, stored in the directory of the distribution.
	
	This utility has little value for users of the standalone release
	(either of the versions packaged in tarfiles or zipfiles), but is
	developed because packaging systems present a particular challenge to
	Ruwiki, as simply running &ldquo;ruwiki_servlet&rdquo; with no
	arguments will look for the data files and the template files relative
	to the current directory. With \RubyGems, though, this would require
	that the user specify something like:
	
	  ruwiki_servlet \
	    --template-path /usr/local/lib/ruby/gems/1.8/ruwiki-0.9.0/templates \
	    --flatfiles-data-path /usr/local/lib/ruby/gems/1.8/ruwiki-0.9.0/data
	
	This is not the preferred option because Wiki installations may be
	private and the /usr/local directory is a system-wide shared
	directory. Additionally, since Ruwiki works as a CGI, the system
	shared data and template paths will not be generally accessible (and
	should not be world-writeable!) to CGI executables.
	
	This utility also encapsulates Win32 service management through
	Win32::Service for the \WEBrick servlet runner.
	
	=== <tt>ruwiki <command> [<em>parameters</em>]</tt>
	The <tt>ruwiki</tt> utility will recognise four different commands on
	all platforms and a fourth command on Windows. These commands are:
	
	; help : Displays general help or command-specific help.
	; install : Installs the default deployment package.
	; package : Packages a Ruwiki installation.
	; unpackage : Unpackages a Ruwiki installation.
	; service : Manages a Win32::Service for Ruwiki.
	
	==== <tt>ruwiki help commands</tt>
	The list of known commands can be displayed by providing this command.
	
	   % ruwiki help commands
	==== <tt>ruwiki help <command></tt>
	The help for the named command (one of install, package, unpackage, or
	service) will be displayed upon providing this command to the ruwiki
	utility.
	
	   % ruwiki help install
	==== <tt>ruwiki install [<em>OPTIONS</em>] [<em>--to DEST</em>]
	Creates a new Ruwiki instance in the current directory or the directory
	specified by the <tt>--to</tt> option. By default, the data, template,
	and a default configuration file are installed to the destination
	directory. OPTIONS may be one of the following:
	
	; servlet : Installs the Ruwiki WEBrick servlet stub.
	; service : Installs the Ruwiki Win32::Service stub.
	; cgi : Installs the Ruwiki CGI script model.
	; data : Default; installs the Ruwiki default data, templates, and configuraiton file.
	
	Installation option names can be disabled with a dash (&lsquo;-&rsquo;)
	or the word &lsquo;no&rsquo;, making &lsquo;-data&rsquo; and
	&lsquo;nodata&rsquo; functionally equivalent.
	
	  % ruwiki install cgi data
	==== <tt>ruwiki package [<em>SOURCE</em>] [<em>--output PACKAGE</em>|<em>-o PACKAGE</em>] [<em>--replace</em>]</tt>
	Packages the Ruwiki files (data, templates, and executables) from the
	specified source or the current directory into the specified output
	package (or &ldquo;./ruwiki.pkg&rdquo;). If the SOURCE is a ruwiki
	configuration file (e.g., &ldquo;ruwiki.conf&rdquo;), then that will be
	used to determine the location and name of the data and template
	directories.
	
	Specify <tt>--replace</tt> to replace the existing output package. If
	an output package is specified that already exists, then <tt>ruwiki
	package</tt> will refuse to output to the file unless
	<tt>--replace</tt> is specified. If an output package is not specified
	and <tt>--replace</tt> is not specified, then an incremental package
	will be generated (e.g., &ldquo;./ruwiki-1.pkg&rdquo;).
	
	: NOTE: The packaging process will normalize the data and templates
	: directory names to be relative to the unpacking directory. They will
	: NEVER be absolute paths.
	
	  % ruwiki package
	==== <tt>ruwiki unpackage [<em>SOURCE</em>] [<em>--output DIRECTORY</em>|<em>-o DIRECTORY</em>]</tt>
	Unpackages the provided Ruwiki package (default "./%1$s") into the
	specified directory (default ".").
	
	  % ruwiki unpackage
	==== <tt>ruwiki service <command> <NAME> [<em>command-options</em>]</tt>
	Manages a Ruwiki WEBrick servlet as a Win32 service (with the
	assistance of
	[http://raa.ruby-lang.org/list.rhtml?name=win32-service win32-service]).
	This works in ways similar to a daemon on Unix. The sub-commands
	available to <tt>ruwiki service</tt> are:
	===== <tt>ruwiki service install NAME [DESCRIPTION] [options]</tt>
	Installs the Ruwiki WEBrick servlet as the named Win32 service.
	<tt>install</tt> accepts an optional description (all non-options will
	be included in the description). The options for <tt>install</tt> are:
	; --rubybin RUBYPATH : The path to the Ruby binary.
	; --exec SERVICEPATH : The path to the service executable.
	; --home PATHTOHOME : The path to the home directory.
	===== <tt>ruwiki service start NAME</tt>
	Starts the named Ruwiki service.
	===== <tt>ruwiki service stop NAME</tt>
	Stops the named Ruwiki service.
	===== <tt>ruwiki service delete NAME</tt>
	Deletes the named Ruwiki service.
	
	: NOTE: This command can probably be used to manage other Win32
	: services that respond to the appropriate commands.
	
	== Upgrading and Converting: ruwiki_convert
	: This section was formerly a separate entry in the Wiki entitled
	: &ldquo;Upgrading and Converting&rdquo;.
	
	The flatfile backend format in Ruwiki %RV#% is not compatible with that
	of versions of Ruwiki earlier than 0.8.0. There are a number of
	reasons for this, but because of this and that there are now three
	different backend formats, Ruwiki now has a converter utility between
	backends.
	
	There are two other incompatibilities of note:
	# Ruwiki now defaults to &ldquo;ruwiki&rdquo; as an extension (e.g., \ProjectIndex.ruwiki) to the storage files. This is, of course, is something that can be modified with a configuration option, but you may find it desirable to rename your files to match this naming convention.
	# The rdiff format is incompatible. It is recommended that you remove all .rdiff files from your data directory before using Ruwiki.
	
	=== ruwiki_convert [options] <directory>+
	The converter utility will work on all files in a directory and its
	subdirectories.
	
	When a file is encountered, it will be examined to be a known form of a
	Ruwiki backend (marshal, yaml, flatfiles, or "old" flatfiles). If the
	file is not one of these forms, then the file is skipped. Otherwise, it
	is converted to the specified format. By default, the converted files
	will be backed up.
	
	==== ruwiki_convert Options
	; --format=FORMAT : Converts encountered files (regardless of the current format), to the specified format. Default is yaml. Allowed formats are: yaml marshal flatfiles
	; --[no-]backup : Create backups of upgraded files. Default is --backup.
	; --backup-extension=EXTENSION : Specify the backup extension. Default is "~", which is appended to the data filename.
	; --extension=EXTENSION : Specifies the extension of Ruwiki data files. The default is .ruwiki
	; --no-extension : Indicates that the Ruwiki data files have no extension.
	; --quiet : Runs quietly. Default is to run with normal messages.
	; --verbose : Runs with full messages. Default is to run with normal messages.
	; --help : Shows this text.
properties!project:	Ruwiki
properties!title:	RuwikiUtilities
properties!topic:	RuwikiUtilities
properties!version:	1
ruwiki!content-version:	2
ruwiki!version:	%RV#%
